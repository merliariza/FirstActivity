// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(FirstActivityDbContext))]
    partial class FirstActivityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Categories_catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("categories_catalog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category_option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Catalogoptions_id")
                        .HasColumnType("int")
                        .HasColumnName("catalogoptions_id");

                    b.Property<int>("Categoriesoptions_id")
                        .HasColumnType("int")
                        .HasColumnName("categoriesoptions_id");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Catalogoptions_id");

                    b.HasIndex("Categoriesoptions_id");

                    b.ToTable("category_option", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chapter_number")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("chapter_number");

                    b.Property<string>("Chapter_title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("chapter_title");

                    b.Property<string>("Componenthtml")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("Componentreact")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componentreact");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("Survey_id")
                        .HasColumnType("int")
                        .HasColumnName("survey_id");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Survey_id");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Domain.Entities.MemberRols", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MemberId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MemberId", "RolId");

                    b.HasIndex("MemberId1");

                    b.HasIndex("RolId");

                    b.ToTable("members_rols", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Option_question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment_options")
                        .HasColumnType("longtext")
                        .HasColumnName("comment_options");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Numberoption")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numberoption");

                    b.Property<int>("Option_id")
                        .HasColumnType("int")
                        .HasColumnName("option_id");

                    b.Property<int>("Optioncatalog_id")
                        .HasColumnType("int")
                        .HasColumnName("optioncatalog_id");

                    b.Property<int>("Optionquestion_id")
                        .HasColumnType("int")
                        .HasColumnName("optionquestion_id");

                    b.Property<int>("Subquestion_id")
                        .HasColumnType("int")
                        .HasColumnName("subquestion_id");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Option_id");

                    b.HasIndex("Optioncatalog_id");

                    b.HasIndex("Subquestion_id");

                    b.ToTable("option_questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Options_response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Optiontext")
                        .HasColumnType("longtext")
                        .HasColumnName("optiontext");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Options_response", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Chapter_id")
                        .HasColumnType("int")
                        .HasColumnName("chapter_id");

                    b.Property<string>("Comment_question")
                        .HasColumnType("longtext")
                        .HasColumnName("comment_question");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Question_number")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("question_number");

                    b.Property<string>("Question_text")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("question_text");

                    b.Property<string>("Response_type")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("response_type");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Chapter_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Sub_question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment_subquestion")
                        .HasColumnType("longtext")
                        .HasColumnName("comment_subquestion");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("Subquestion_id")
                        .HasColumnType("int")
                        .HasColumnName("subquestion_id");

                    b.Property<string>("Subquestion_number")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("subquestion_number");

                    b.Property<string>("Subquestion_text")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("subquestiontext");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Subquestion_id");

                    b.ToTable("sub_questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Summary_option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code_number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code_number");

                    b.Property<int>("Id_survey")
                        .HasColumnType("int")
                        .HasColumnName("id_survey");

                    b.Property<int>("Idquestion")
                        .HasColumnType("int")
                        .HasColumnName("idquestion");

                    b.Property<string>("Valuerta")
                        .HasColumnType("longtext")
                        .HasColumnName("valuerta");

                    b.HasKey("Id");

                    b.HasIndex("Id_survey");

                    b.HasIndex("Idquestion");

                    b.ToTable("summary_options", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Componenthtml")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("Componentreact")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componentreact");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Instruction")
                        .HasColumnType("longtext")
                        .HasColumnName("instruction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("surveys", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserMember", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category_option", b =>
                {
                    b.HasOne("Domain.Entities.Categories_catalog", "Categories_catalogs")
                        .WithMany("Category_options")
                        .HasForeignKey("Catalogoptions_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Options_response", "Options_responses")
                        .WithMany("Category_options")
                        .HasForeignKey("Categoriesoptions_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categories_catalogs");

                    b.Navigation("Options_responses");
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.HasOne("Domain.Entities.Survey", "Survey")
                        .WithMany("Chapters")
                        .HasForeignKey("Survey_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.MemberRols", b =>
                {
                    b.HasOne("Domain.Entities.UserMember", "UserMember")
                        .WithMany("MemberRols")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", null)
                        .WithMany("MemberRols")
                        .HasForeignKey("MemberId1");

                    b.HasOne("Domain.Entities.role", "role")
                        .WithMany("MemberRols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");

                    b.Navigation("role");
                });

            modelBuilder.Entity("Domain.Entities.Option_question", b =>
                {
                    b.HasOne("Domain.Entities.Options_response", "Options_responses")
                        .WithMany("Option_questions")
                        .HasForeignKey("Option_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Option_questions")
                        .HasForeignKey("Option_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Categories_catalog", "Categories_catalogs")
                        .WithMany("Option_questions")
                        .HasForeignKey("Optioncatalog_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sub_question", "Sub_question")
                        .WithMany("Option_questions")
                        .HasForeignKey("Subquestion_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categories_catalogs");

                    b.Navigation("Options_responses");

                    b.Navigation("Question");

                    b.Navigation("Sub_question");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("Chapter_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.UserMember", "Users")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Sub_question", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Sub_questions")
                        .HasForeignKey("Subquestion_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Summary_option", b =>
                {
                    b.HasOne("Domain.Entities.Survey", "Survey")
                        .WithMany("Summary_options")
                        .HasForeignKey("Id_survey")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Summary_options")
                        .HasForeignKey("Idquestion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.role", b =>
                {
                    b.HasOne("Domain.Entities.Member", null)
                        .WithMany("roles")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("Domain.Entities.Categories_catalog", b =>
                {
                    b.Navigation("Category_options");

                    b.Navigation("Option_questions");
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Navigation("MemberRols");

                    b.Navigation("roles");
                });

            modelBuilder.Entity("Domain.Entities.Options_response", b =>
                {
                    b.Navigation("Category_options");

                    b.Navigation("Option_questions");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("Option_questions");

                    b.Navigation("Sub_questions");

                    b.Navigation("Summary_options");
                });

            modelBuilder.Entity("Domain.Entities.Sub_question", b =>
                {
                    b.Navigation("Option_questions");
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Summary_options");
                });

            modelBuilder.Entity("Domain.Entities.UserMember", b =>
                {
                    b.Navigation("MemberRols");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.role", b =>
                {
                    b.Navigation("MemberRols");
                });
#pragma warning restore 612, 618
        }
    }
}
